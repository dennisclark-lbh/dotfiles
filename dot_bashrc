# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# Rootless Docker
#export DOCKER_HOST=unix:///run/user/1000/docker.sock

# Bash function to set the window title - for use with compatible shell prompt handlers
function set_win_title(){
  echo -ne "\033]0;$USER@${WSL_DISTRO_NAME:-$HOSTNAME} $(basename $SHELL) in $(basename "$PWD")\007"
}

# If no active SSH agent socket, set the default
if [[ -z "$SSH_AUTH_SOCK" ]]; then
  # SSH agent socket (native or WSL)
  if [[ -d "$HOME/.1password" ]]; then
    export SSH_AUTH_SOCK="$HOME/.1password/agent.sock"
  else
    export SSH_AUTH_SOCK="$HOME/.ssh/agent.sock"
  fi
fi

# If in WSL, relay ssh agent socket to Windows host ssh agent socket
# Source: https://gist.github.com/tecandrew/98d1e6e62a79640d40e7a652d2fb2e90
if [[ -f /usr/bin/wslpath ]]; then
  (
    set -eu
    piperelay=(socat "UNIX-LISTEN:$SSH_AUTH_SOCK,fork" "EXEC:npiperelay.exe -ei -s //./pipe/openssh-ssh-agent,nofork")
    if ! pgrep "-fxU$UID" "${piperelay[*]}" >/dev/null; then
      rm -f "$SSH_AUTH_SOCK"
      (setsid "${piperelay[@]}" &) >/dev/null
    fi
  )
fi

# https://starship.rs
if command -v starship >/dev/null; then
  # Starship looks bad on consoles (no Nerd glyphs)
  # If a parent shell already inited starship then assume a compatible terminal
  if echo $TERM | grep -q xterm || [[ -n "$STARSHIP_SHELL" ]]; then
    eval "$(starship init bash)"
    starship_precmd_user_func="set_win_title"
  fi
fi

# https://github.com/pyenv/pyenv
export PYENV_ROOT=~/.pyenv
if echo $PATH | grep -F -v -q "$PYENV_ROOT/bin"; then
  export PATH="$PYENV_ROOT/bin:$PATH"
  if command -v pyenv >/dev/null; then
    eval "$(pyenv init --path)"
  fi
fi
# This adds to PATH as well as a bash prompt hook function
if command -v pyenv >/dev/null; then
  eval "$(pyenv virtualenv-init -)"
fi

# https://github.com/ajeetdsouza/zoxide
if command -v zoxide >/dev/null; then
  eval "$(zoxide init bash)"
fi

# https://github.com/phpbrew/phpbrew
# To enable PHP version info in your shell prompt, please set PHPBREW_SET_PROMPT=1
#
#    export PHPBREW_SET_PROMPT=1
#
#To enable .phpbrewrc file searching, please export the following variable:
#
#    export PHPBREW_RC_ENABLE=1
[[ -e ~/.phpbrew/bashrc ]] && source ~/.phpbrew/bashrc

# https://github.com/junegunn/fzf
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# https://github.com/99designs/aws-vault
export AWS_VAULT_BACKEND=pass
export AWS_VAULT_PASS_PREFIX=aws-vault

# https://github.com/nvm-sh/nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# asdf-vm scripts are well-behaved; keep at end of .bashrc
[ -f $HOME/.asdf/asdf.sh ] && . $HOME/.asdf/asdf.sh
[ -f $HOME/.asdf/completions/asdf.bash ] && . $HOME/.asdf/completions/asdf.bash
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/bashrc" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/bashrc"
